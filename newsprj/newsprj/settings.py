"""
Django settings for newsprj project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y3+6cjo$tb*lco=10nd*xd$v&qji#r@e6@-mn$xh3m48g%y394'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'newsapp.apps.NewsappConfig',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'datetimewidget',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'newsprj.urls'
import os

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join('newsapp/templates/newsapp')
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'newsprj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "/newsapp/news"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

SITE_URL = 'http://127.0.0.1:8000/'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

# Настройки почты
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # 'django.core.mail.backends.smtp.EmailBackend'-для рассылки на почту
    # 'django.core.mail.backends.console.EmailBackend'- для вывода в консоль
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "example@yandex.ru"
EMAIL_HOST_PASSWORD = "iliezvcovrxqizey"
                     # "iliezvcovrxqizey"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "example@yandex.ru"

SERVER_EMAIL = "example@yandex.ru"

APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'

APSCHEDULER_RUN_NOW_TIMEOUT = 25


CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = "Europe/Moscow"

# LOGGING ={
#     'version': 1,
#     'disable_existing_loggers': False,
#     'loggers': {
#         'django': {
#             'handlers': ['newsapp'],
#             'level': 'DEBUG',
#         }
#     },
#     'handlers': {
#         'newsapp': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'bug.log',
#             'formatter': 'myformatter',
#         },
#         'console': {
#             'level': 'INFO',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#     },
#     'formatters': {
#         'myformatter': {
#             'format': '{asctime} {levelname} {message}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#     },
# }
ADMINS = [
    ('Admin', 'ignaty88@yandex.ru')
]

def debug_info_filter(message):
    return message.levelname == 'DEBUG' or message.levelname == 'INFO'


def warning_filter(message):
    return message.levelname == 'WARNING'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'console_debug_info': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'console_warning': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{',
        },
        'console_error_critical': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{',
        },
        'file_general_log': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        'file_errors_log': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'style': '{',
        },
        'file_security_log': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        'mail_errors_log': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'debug_info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': debug_info_filter,
        },
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': warning_filter,
        },
    },
    'handlers': {
        'console_debug_info': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'debug_info_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_debug_info'
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true', 'warning_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning'
        },
        'console_error_critical': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_error_critical'
        },
        'file_general_log': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'Logging/general.log',
            'formatter': 'file_general_log'
        },
        'file_errors_log': {
            'class': 'logging.FileHandler',
            'filename': 'Logging/errors.log',
            'formatter': 'file_errors_log'
        },
        'file_security_log': {
            'class': 'logging.FileHandler',
            'filename': 'Logging/security.log',
            'formatter': 'file_security_log'
        },
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
            'formatter': 'mail_errors_log'
        }
    },
    'loggers': {
        'django': {
            'level': 'DEBUG',
            'handlers': ['console_debug_info', 'console_warning', 'console_error_critical', 'file_general_log'],
            'propagate': True
        },
        'django.request': {
            'level': 'ERROR',
            'handlers': ['file_errors_log', 'mail_admins'],
        },
        'django.server': {
            'level': 'ERROR',
            'handlers': ['file_errors_log', 'mail_admins'],
        },
        'django.template': {
            'level': 'ERROR',
            'handlers': ['file_errors_log'],
        },
        'django.db_backends': {
            'level': 'ERROR',
            'handlers': ['file_errors_log'],
        },
        'django.security': {
            'level': 'DEBUG',
            'handlers': ['file_security_log'],
        },
    }
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'is_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'is_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#     },
#     'formatters': {
#         'console': {
#             'format': '[%(asctime)s] %(levelname)s [%(pathname)s] %(message)s',
#         },
#         'file': {
#             'format': '[%(asctime)s] %(levelname)s [%(module)s] %(message)s',
#         },
#         'errors': {
#             'format': '[%(asctime)s] %(levelname)s [%(pathname)s] %(message)s',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['is_debug_true'],
#             'class': 'logging.StreamHandler',
#             'formatter': 'console',
#         },
#         'file_general': {
#             'level': 'INFO',
#             'filters': ['is_debug_false'],
#             'class': 'logging.FileHandler',
#             'filename': 'general.log',
#             'formatter': 'file',
#         },
#         'file_errors': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': 'errors.log',
#             'formatter': 'errors',
#         },
#         'email': {
#             'level': 'ERROR',
#             'filters': ['is_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler',
#         },
#         'security': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'security.log',
#             'formatter': 'file',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file_general'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['console', 'file_errors', 'email'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.server': {
#             'handlers': ['console', 'file_errors', 'email'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.template': {
#             'handlers': ['console', 'file_errors'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.db.backends': {
#             'handlers': ['console', 'file_errors'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.security': {
#             'handlers': ['security'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
# }
